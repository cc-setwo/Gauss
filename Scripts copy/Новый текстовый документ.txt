using UnityEngine;
using System.Collections;
using System;
using UnityEngine.UI;
using System.Linq;

public class Gauss2 : MonoBehaviour
{
    public InputField inp1;
    public InputField inp2;
    public InputField inp3;
    public InputField inp4;
    public InputField inp5;
    public InputField inp6;
    Button b;
    public GameObject g1;
    public GameObject g2;
    public GameObject g3;
    public GameObject g4;
    public GameObject g5;
    public GameObject g6;
    // Use this for initialization
    void Start()
    {
        b = gameObject.GetComponent<Button>();
    }

    // Update is called once per frame
    void Update()
    {
        b.onClick.AddListener(() => { Click(); });
    }
    public void Click()
    {
        int size = 6;
        if (inp6.text == "" && g6.active)
        {
            g6.SetActive(false);
            size--;
        }
        else
            g6.SetActive(true);
        if (inp5.text == "" && g5.active)
        {
            g5.SetActive(false);
            size--;
        }
        else
            g5.SetActive(true);
        if (inp4.text == "" && g4.active)
        {
            size--;
            g4.SetActive(false);
        }
        else
            g4.SetActive(true);
        if (inp3.text == "" && g3.active)
        {
            g3.SetActive(false);
            size--;
        }
        else
            g3.SetActive(true);
        if (inp2.text == "" && g2.active)
        {
            size--;
            g2.SetActive(false);
        }
        else
            g2.SetActive(true);
        if (inp1.text == "" && g1.active)
        {
            size--;
            g1.SetActive(false);
        }
        else
            g1.SetActive(true);

        ///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//////////////////////////////
        ///
        int sirows = 0;
        string[] srows = new string[size];
        srows[0] = inp1.text;
        srows[1] = inp2.text;
        srows[2] = inp3.text;
        //srows[3] = inp4.text;
        // srows[4] = inp5.text;
        // srows[5] = inp6.text;


        string[] ss = srows[0].Split(',');
        for (int i = 0; i < ss.Length; i++)
            sirows++;

        int[,] irows = new int[size, sirows];
        for (int i = 0; i < size; i++)
            for (int j = 0; j < sirows; j++)
            {
                string[] s = new string[srows.Length];
                s = srows[i].Split(',');
                irows[i, j] = Convert.ToInt32(s[j]);
            }

        ///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//////////////////////////////
        /// int pivot = 0;
        //for (int i = 0; i < srows.Length; i++)
        //{
        //    if (irows[0, 0] == 1)
        //        break;
        //    if (irows[i, 0] == 1 && i != 0)
        //    {
        //        for (int j = 0; j < sirows; j++)
        //        {
        //            int[] temp = new int[sirows];
        //            temp[j] = irows[0, j];
        //            irows[0, j] = irows[i, j];
        //            irows[i, j] = temp[j];
        //        }
        //    }
        //}
        ///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//////////////////////////////
        ///
        int mnoz = 0;
        bool flag = false;
        int counterformnoz = 0;
        for (int k = 0; k < srows.Length; k++)
        {
         
            int pivot = GetPivot(k, irows);
            if (pivot == 0)
            {
                irows = Swap(irows, sirows, k);
                pivot = GetPivot(k, irows);
            }
            int current = 0;
            counterformnoz = k+1;
            for (int i = counterformnoz; i < srows.Length; i++)
            {
                for (int j = 0; j < sirows; j++)
                {
                    if (!flag)
                    {
                        int temp = GetTarget(irows, counterformnoz, k);
                        mnoz = Moznik(pivot, GetTarget(irows, counterformnoz, k));
                        counterformnoz++;
                        flag = true;
                    }
                    current = GetCurrent(irows,k,j) * mnoz;
                    irows[i, j] -= current;
                }
                flag = false;
                //CheckForRows(irows, sirows, i);
             
            
            }
          
        }
        ///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//////////////////////////////
        ///
        irows = Divide(irows, sirows, srows.Length);


        ///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//////////////////////////////
        ///
        double mnozz = 0;
        bool isdouble = false;
        for (int k = srows.Length-1; k > 0; k--)
        {
            int pivot = GetPivot(k, irows);
            int current = 0;
            counterformnoz = k - 1;
            double dcurrent = 0;
            for (int i = counterformnoz; i >=0; i--)
            {
                for (int j = 0; j < sirows; j++)
                {
                    if (!flag)
                    {
                        int temp = GetTarget(irows, counterformnoz, k);
                        mnoz = Moznik(pivot, GetTarget(irows, counterformnoz, k));
                        if (pivot % temp != 0)
                        {
                            
                            mnozz = temp;
                            mnozz /= pivot;
                            isdouble = true;
                        }
                        counterformnoz--;

                        flag = true;
                        
                    }
                    if (isdouble)
                    {
                        dcurrent = GetCurrent(irows, k, j) * mnozz;
                        irows[i, j] -= Convert.ToInt32(dcurrent);
                        continue;
                    }
                    current = GetCurrent(irows, k, j) * mnoz;
                    irows[i, j] -= current;
                }
                flag = false;
                isdouble = false;


            }
           
        }
        Debug.Log("Congratulations! Succseed");

    }
    int[,] Divide(int[,] arr, int sirows,int srows)
    {
        int[] tt = new int[sirows];
        int gccd = 0;
        bool[] bb = new bool[sirows];
        for (int i = 0; i < bb.Length; i++)
            bb[i] = false;
        bool check = false;

        for (int i = 0; i < srows; i++)
        {
            for (int j = 0; j < sirows; j++)
                if (arr[i, j] % 2 == 0 &&arr[i,j]!=0)
                    bb[j] = true;
            //for (int b = 0; b < sirows; b++)
            //    if (irows[i, b] == 0)
            //        count++;
            //if (count != bb.Length)
            //    continue;
            for (int l = 0; l < bb.Length; l++)
            {
                if (bb[l])
                    check = true;
                else {
                    check = false;
                    break;
                }
            }
            if (check)
            {
                for (int t = 0; t < sirows; t++)
                {
                    tt[t] = arr[i, t];
                }
                gccd = GreatestCommonDivisor(tt);
                for (int e = 0; e < sirows; e++)
                    arr[i, e] /= gccd;
            }
            for (int uii = 0; uii < bb.Length; uii++)
                bb[uii] = false;
        }
        return arr;

    }
    int[,] Swap(int[,] arr, int sirows,int i)
    {
        int[] temp = new int[sirows];
            for (int f = 0; f < sirows; f++)
                temp[f] = arr[i, f];
        
            for (int j = 0; j < sirows; j++)
            {
                arr[i, j] = arr[i + 1, j];
                arr[i + 1, j] = temp[j];
            }
        return arr;
     }
    int[,] CheckForRows(int [,]arr,int sirows,int i)
    {
        bool checkk = false;
        for (int h = 0; h < sirows; h++)
        {
            if (arr[i, h] == 0)
                checkk = true;
            else
            {
                checkk = false;
                break;
            }
        }
        if (checkk)
        {
            int[] temp = new int[sirows];
            int[] temp2 = new int[sirows];
            for (int y = 1; y < sirows; y++)
            {
                for (int f = 0; f < sirows; f++)
                    temp[f] = arr[y, f];
                y++;
                for (int f = 0; f < sirows; f++)
                    temp2[f] = arr[y, f];
                break;
            }
            for (int y = 1; y < sirows; y++)
            {
                for (int f = 0; f < sirows; f++)
                {
                    arr[y, f] = temp2[f];

                }
                y++;
                for (int f = 0; f < sirows; f++)
                {
                    arr[y, f] = temp[f];

                }
                break;
            }
        }
        return arr;
    }
    int GetTarget(int[,]arr,int pivot, int WhicRow)
    {
        return arr[pivot, WhicRow];
    }
    int Moznik(int pivot, int target)
    {
        return target / pivot;
    }
    double Moznik(double pivot, double target)
    {
        return target / pivot;
    }
    int GetCurrent(int [,]arr, int WhichRow, int WhichPos)
    {
        return arr[WhichRow,WhichPos];
    }
    int GetPivot(int WhichRow,int [,]arr)
    {
        int res=0;
        try
        {
            if (arr[WhichRow, WhichRow] != 0)
                return arr[WhichRow, WhichRow];
        }
        catch
        {
            if (arr[WhichRow-1, WhichRow-1] != 0)
                return arr[WhichRow-1, WhichRow-1];
        }
        int i = 0;
        while (res != 0)
        {
            res = arr[WhichRow, i];
            i++;
        }
        return res;
    }
    static int GreatestCommonDivisor(int[] numbers)
    {
        return numbers.Aggregate(GreatestCommonDivisor);
    }

    static int GreatestCommonDivisor(int x, int y)
    {
        return y == 0 ? x : GreatestCommonDivisor(y, x % y);
    }
}
